#!/usr/bin/env python3
# -*- mode: python -*-
__VERSION__ = "1.6"

import sys, os
import subprocess

TIME_FMT="[time] total: %e (%Us user %Ss sys %P cpu | %t mem)"

class FiletypeError(ValueError): pass

def tempdir():
    import tempfile, shutil, atexit

    path = tempfile.mkdtemp()
    atexit.register(shutil.rmtree, path)
    return path

def get_type(f, filetype=None):
    if filetype == None:
        ptype = f.split(".")
        filetype = ptype[-1] if len(ptype) > 1 else None

    if not Extensions.have(filetype, "run"):
        if filetype:
            raise ValueError("Unsupported file type")
        else:
            raise FiletypeError("Unable to divine file type")

    return filetype

def run(f, args, opts):
    filetype = get_type(f, opts.filetype)
    dir = tempdir()
    commands = Extensions.get(filetype, "run")(f, args=args, tempdir=dir)

    for cmd in commands:
        sh = cmd
        if opts.verbose:
            import shlex
            print("#", *map(shlex.quote, sh))
        if opts.measure:
            sh = ["time", "-f", TIME_FMT] + sh
        subprocess.call(sh)

def compile(f, args, opts):
    filetype = get_type(f, opts.filetype)
    outfile = opts.outfile or Extensions.get(filetype, "outfile")(f)

    if os.path.isdir(opts.outfile):
        fname = os.path.basename(Extensions.get(filetype, "outfile")(f))
        outfile = os.path.join(opts.outfile, fname)

    dir = tempdir()
    compile_fn = Extensions.get(filetype, "compile")
    commands = compile_fn(f, args=args, tempdir=dir, target=outfile)

    for cmd in commands:
        if opts.verbose:
            import shlex
            print("#", *map(shlex.quote, cmd))

        subprocess.call(cmd)

def arg_parser():
    import argparse

    parser = argparse.ArgumentParser(description="Compile and run files of various types")
    parser.add_argument('--version', action='version', version='%(prog)s ' + __VERSION__)
    parser.add_argument("-c", "--compile", action="store_true", dest="compile",
                        help="Compile file instead of just running it", default=False)
    parser.add_argument("-m", "--measure", action="store_true", dest="measure",
                        help="Measure program runtime with `time`", default=False)
    parser.add_argument("-o", action="store", type=str, dest="outfile",
                        help="Where to put compiled code", default=None)
    parser.add_argument("-t", action="store", type=str, dest="filetype",
                        help="Type of code in file", default=None)
    parser.add_argument("-v", "--verbose", action="store_true", dest="verbose",
                        help="Print each command as it is run", default=False)
    parser.add_argument("file", type=str, help="File to compile or run")
    parser.add_argument("args", nargs="*", type=str,
                        help="Arguments to pass when running the file")

    options = parser.parse_args()

    if options.outfile and not options.compile:
        parser.error("`--outfile` requires `--compile`")

    if options.compile and options.measure:
        parser.error("Cannot set both `--measure` and `--compile`")
    
    return options

def main():
    options = arg_parser()
    
    if options.compile:
        compile(options.file, options.args, opts=options)
    else:
        run(options.file, options.args, opts=options)

# ------------------------------------------------------------------------------

class Extensions:
    def have(ext, type):
        return ext and hasattr(Extensions, ext) and hasattr(getattr(Extensions, ext), type)

    def get(ext, type):
        return ext and getattr(getattr(Extensions, ext), type)

    def instantiate(cls): return cls()
    
    @instantiate
    class c:
        def run(cls, f, args, tempdir):
            fname = os.path.join(tempdir, cls.outfile(f))
            yield from cls.compile(f, args, tempdir, fname)
            yield [fname] + args

        def compile(cls, f, args, tempdir, target):
            yield ["clang", "--std=c11", "-O3", f, "-o", target, "-lm", "-lc", "-fsanitize=undefined"]

        def outfile(cls, f):
            return f.split("/")[-1].rsplit(".", 1)[0]

    @instantiate
    class cpp:
        def run(cls, f, args, tempdir):
            fname = os.path.join(tempdir, cls.outfile(f))
            yield from cls.compile(f, args, tempdir, fname)
            yield [fname] + args

        def compile(cls, f, args, tempdir, target):
            yield ["clang++", "--std=c++11", "-O3", f, "-o", target, "-lm", "-lc", "-fsanitize=undefined"] + args

        def outfile(cls, f):
            return f.split("/")[-1].rsplit(".", 1)[0]

    @instantiate
    class hs:
        def run(cls, f, args, tempdir):
            fname = os.path.join(tempdir, cls.outfile(f))
            yield from cls.compile(f, args, tempdir, fname)
            yield [fname] + args

        def compile(cls, f, args, tempdir, target):
            yield ["ghc", "-O3", "-o", target,
                   "-outputdir", tempdir, "--make"] + args

        def outfile(cls, f):
            return f.split("/")[-1].rsplit(".", 1)[0]

    @instantiate
    class java:
        def run(cls, f, args, tempdir):
            yield from cls.make(f, args, tempdir, target)
            yield ["java", "-cp", tempdir, cls.outfile(f)]

        def compile(cls, f, args, tempdir, target):
            yield from cls.make(f, args, tempdir, target)
            yield ["mv", os.path.join(tempdir, cls.outfile(f) + ".class"), target]

        def make(cls, f, args, tempdir, target):
            yield ["javac", "-d", tempdir, f] + args

        def outfile(cls, f):
            return f.split("/")[-1].rsplit(".", 1)[0]

    @instantiate
    class org:
        def EMACS_COMMAND(cls, f):
            return [ "emacs",
                     "--batch", "-Q",
                     "--load", "~/.emacs.d/export.el",
                     "--eval", "(require 'org-install)",
                     "--visit", f,
                     "--funcall", "org-export-as-latex-batch"]
        
        def run(cls, f, tempdir, args):
            yield from cls.make(f, tempdir, args)
            yield ["evince", cls.outname(tempdir, f)]

        def compile(cls, f, tempdir, target, args):
            yield from cls.make(f, tempdir, args)
            yield ["mv", cls.outname(tempdir, f), target]

        def make(cls, f, tempdir, args):
            yield ["cp", f, tempdir]
            yield from cls.link_dir("im", f, tempdir)
            yield from cls.link_dir("etc", f, tempdir)
            tempname = os.path.join(tempdir, os.path.split(f)[1])
            yield EMACS_COMMAND(tempname)
            texfile = cls.outfile(f)[:-4] + ".tex" # Replace .pdf extension with .tex
            texname = os.path.join(tempdir, os.path.split(texfile)[1])
            yield ["rubber", "--pdf", "--into", tempdir, texname] + args

        def link_dir(cls, dir, f, tempdir):
            dir_path = os.path.join(os.path.dirname(f), dir)
            target_path = os.path.join(tempdir, dir)

            if os.path.isdir(dir_path):
                yield ["ln", "-s", dir_path, target_path]

        def outfile(cls, f):
            return f.split("/")[-1].rsplit(".", 1)[0] + ".pdf"
            
    @instantiate
    class py:
        def run(cls, f, args, tempdir):
            yield ["python", f] + args

    @instantiate
    class sh:
        def run(cls, f, args, tempdir):
            yield ["bash", f] + args

    @instantiate
    class tex:
        def run(cls, f, args, tempdir):
            dir_path = os.path.abspath(os.path.dirname(f))
            vars = { "bibtex.path": dir_path, "bibtex.stylepath": dir_path }

            yield ["rubber", "-I", dir_path] + sum((["--command", "{} {}".format(key, value)] for key, value in vars.items()), []) + ["--pdf", "--into", tempdir, f] + args
            yield ["evince", os.path.join(tempdir,
                                          os.path.split(cls.outfile(f))[1])]

        def compile(cls, f, args, tempdir, target):
            yield ["rubber", "--pdf", "--into", tempdir, f] + args
            yield ["mv", os.path.join(tempdir, os.path.split(cls.outfile(f))[1]), target]

        def outfile(cls, f):
            return f.split("/")[-1].rsplit(".", 1)[0] + ".pdf"
            
if __name__ == "__main__":
    main()
