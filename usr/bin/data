#!/usr/bin/env python

import sys
def opendb(name="info"):
    return CouchDatabase(name, create=True)

def lookup(db, rec, *args):
    name = rec
    rec = db.get_record(rec)

    for i, arg in enumerate(args):
        if rec is None or arg not in rec:

            print "ERROR: Field `%s` does not exist in %s:" % (arg, ".".join([name] + list(args[:i])))
            return lookup(db, name, *args[:i])
        elif type(rec) != Record:
            raise TypeError("Type of item expected to be dict, but wasn't")
        rec = rec[arg]

    if type(rec) != Record:
        return rec
    else:
        return [(key, value) for key, value in rec.all_items() if not key.startswith("_") and key != "record_type"]

def set(db, rec, item, *args, **kwargs):
    to = kwargs.get("to", "")

    args = list(reversed(args))
    if not db.get_record(rec):
        db.put_record(Record({}, record_id=rec, record_type="http://www.example.com/generic"))

    rec = db.get_record(rec)
    rec_orig = rec
    while args and item in rec:
        rec = rec[item]
        item = args.pop()
    
    if args:
        for arg in args:
            to = {arg: to}
    
    rec[item] = to
    db.put_record(rec_orig)

def delete(db, rec, item, *args):
    args = list(reversed(args))
    if not db.get_record(rec):
        print "ERROR: No such path"

    rec = db.get_record(rec)
    rec_orig = rec
    while args and item in rec:
        rec = rec[item]
        item = args.pop()
    
    del rec[item]
    db.put_record(rec_orig)

if __name__ == "__main__":
    if len(sys.argv) == 1 or sys.argv[1] == "-h":
        print "Store structured personal data"
        print
        print "USAGE: data <path>               Retreive data stored at <path>"
        print "     | data -s <path> value      Set data stored at <path> to <value>"
        print "     | data -d <path>            Delete data element stored at <path>"
        print
        print "A path is period-separated, such as `test.val`"
        exit()

    from desktopcouch.records.server import CouchDatabase
    from desktopcouch.records.record import Record
    db = opendb()

    if sys.argv[1] == "-s":
        path = sys.argv[2].split(".")
        value = sys.argv[3]
        if len(path) == 1:
            print "ERROR: Path to set must have at least two components"
            exit()

        set(db, *path, to=value)
    elif sys.argv[1] == "-d":
        path = sys.argv[2].split(".")
        delete(db, *path)
    else:
        path = sys.argv[1].split(".")
        res = lookup(db, *path)
        if type(res) == list:
            for key, val in res:
                print "%s%s" % (key.ljust(20), val)
        else:
            print res
