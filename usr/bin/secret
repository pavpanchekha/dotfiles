#!/usr/bin/env python2.7
# -*- mode: python -*-

SECRETFILE = "/home/pavpanchekha/priv/secret.aes"
VERSION = 0.35

import sys        # For reading from stdin
import subprocess # For starting subcommands, such as openssl
import hashlib    # For taking SHA512 hashes of passwords
import tempfile   # For securely passing passwords to processes

def openpipe(cli):
    return subprocess.Popen(cli, stdin=subprocess.PIPE, 
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)

def cryptohash(s):
    return hashlib.sha512(bytes(s)).hexdigest()

class SecretFile:
    def __init__(self, file, password):
        self.file = file
        self.hash = cryptohash(password)

    def read(self):
        with tempfile.NamedTemporaryFile() as f:
            f.write(bytes(self.hash))
            f.flush()
            aes = openpipe(["openssl", "enc", "-salt", "-aes-256-cbc", "-d",
                            "-in", self.file, "-pass", "file:" + f.name])
            out, _ = aes.communicate()
        self.verify(out)
        return out
        
    def write(self, text):
        self.verify(text)
        with tempfile.NamedTemporaryFile() as f:
            f.write(bytes(self.hash))
            f.flush()
            aes = openpipe(["openssl", "enc", "-salt", "-aes-256-cbc",
                            "-out", self.file, "-pass", "file:" + f.name])
        aes.communicate(text)
        
    def append(self, text):
        current = self.read()
        self.write(current + text)
        
    @classmethod
    def verify(self, text):
        # Hack for empty files
        if not text: text = "Version %s\n" % VERSION

        assert text.startswith("Version"), "Invalid password"
        file_version = text.split("\n", 1)[0].split()[1]
        try:
            assert float(file_version) >= VERSION
        except ValueError:
            raise Exception("Could not parse format version")

def prompt_dmenu():
    getpwd = openpipe(["dmenu", "-p", "Master Password: ",
                       "-nb", "#000000", "-nf", "#000000",
                       "-sb", "#000000", "-sf", "#ffffff"])
    pw, _ = getpwd.communicate("")
    if getpwd.returncode: sys.exit(getpwd.returncode)
    if pw[-1] == "\n": pw = pw[:-1]
    return pw

def prompt_getpass():
    import getpass
    return getpass.getpass("Master Password: ")

def get_password(sfile, name):
    read_pw = False
    for line in sfile.read().split("\n"):
        if line.startswith("Name") and line.split()[1] == name:
            read_pw = True
        elif line.startswith("Password") and read_pw:
            return line[line.index("\"")+1:line.rindex("\"")]
    raise ValueError("No such secret")

def list_accounts(sfile):
    for line in sfile.read().split("\n"):
        if line.startswith("Name"):
            print line.split()[1]

def dump_secrets(sfile):
    print sfile.read()

def rehash(sfile):
    text = sfile.read()
    sfile.hash = cryptohash(prompt_password())
    sfile.write(text)

def readin(sfile, text):
    sfile.write(text)

def generate_password(len=12):
    lower  = "abcdefghijklmnopqrstuvwxyz"
    upper  = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    number = "0123456789"
    chars  = "~!@#$%^&()_+-=?/>.<,|\\\"':;"

    import random
    passwd = random.choice(lower) + random.choice(upper) + random.choice(number) + random.choice(chars)

    valid = lower * 3 + upper * 3 + number * 5 + chars * 2
    for i in range(4, len):
        passwd += random.choice(valid)

    l = list(passwd)
    random.shuffle(l)
    return "".join(l)

def new_account(sfile, name, url):
    pwd = generate_password()
    sfile.append("\nName %s\n" % name + "URL %s\n" % url + "Password \"%s\"\n" % pwd)
    return pwd

def xclip(text):
    proc = subprocess.Popen(["xclip", "-selection", "clipboard"], stdin=subprocess.PIPE)
    proc.communicate(text)

def stdout(text):
    print text

def main():
    prompt_password = prompt_dmenu
    if "-g" in sys.argv:
        sys.argv.remove("-g")
        prompt_password = prompt_getpass

    pw = prompt_password()

    output = xclip
    if "-p" in sys.argv:
        sys.argv.remove("-p")
        output = stdout

    sfile = SecretFile(SECRETFILE, pw)
    if len(sys.argv) > 1 and sys.argv[1] == "-n":
        assert len(sys.argv) == 4, "USAGE: secret -n <name> <url>"
        passwd = new_account(sfile, sys.argv[2], sys.argv[3])
        output(passwd)
    elif len(sys.argv) > 1 and sys.argv[1] == "-l":
        list_accounts(sfile)
    elif len(sys.argv) > 1 and sys.argv[1] == "-d":
        dump_secrets(sfile)
    elif len(sys.argv) > 1 and sys.argv[1] == "-r":
        readin(sfile, sys.stdin.read())
    elif len(sys.argv) > 1 and sys.argv[1] == "--rehash":
        rehash(sfile)
    else:
        assert len(sys.argv) == 2
        passwd = get_password(sfile, sys.argv[1])
        output(passwd)

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "-h":
        print "Manage passwords"
        print
        print "USAGE: secret <name>             Get password for account <name>"
        print "     | secret -n <name> <url>    Create a new account <name> at <url> and print the new password"
        print "     | secret -l         List all accounts"
        print "     | secret -d         Dump all account data"
        print "     | secret -r         Read in new account data"
        print "     | secret --rehash   Reencrypt database with new password"
    else:
        main()

