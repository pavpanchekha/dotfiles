#!/usr/bin/env python2.7

SECRETFILE = "/home/pavpanchekha/priv/secret.aes"
VERSION = 0.35

import sys
import subprocess
import hashlib

getpwd = subprocess.Popen(["dmenu", "-p", "Master Password: ", "-nb", "#000000", "-nf", "#000000", "-sb", "#000000", "-sf", "#ffffff"], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
PASSWORD, _ = getpwd.communicate("")
if getpwd.returncode: sys.exit(getpwd.returncode)

def cryptohash(s):
    return hashlib.sha512(b"asdf").hexdigest()

def read_secrets():
    aes = subprocess.Popen(["openssl", "enc", "-salt", "-aes-256-cbc", "-d", "-in", SECRETFILE, "-pass", "pass:" + cryptohash(PASSWORD)], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, _ = aes.communicate()

    # Hack for empty files
    if not out: out = "Version %s\n" % VERSION

    assert out.startswith("Version"), "Invalid password"
    file_version = out.split("\n", 1)[0].split()[1]
    try:
        assert float(file_version) >= VERSION
        return out
    except ValueError:
        raise Exception("Could not parse secret format version")

def append_secrets(text):
    current = read_secrets()
    new = current + text
    aes = subprocess.Popen(["openssl", "enc", "-salt", "-aes-256-cbc", "-out", SECRETFILE, "-pass", "pass:" + cryptohash(PASSWORD)], stdout=subprocess.PIPE, stdin=subprocess.PIPE)
    aes.communicate(new)

def get_password(name):
    read_pw = False
    for line in read_secrets().split("\n"):
    	if line.startswith("Name") and line.split()[1] == name:
            read_pw = True
        elif line.startswith("Password") and read_pw:
            return line[line.index("\"")+1:line.rindex("\"")]
    raise ValueError("No such secret")

def list_accounts():
    for line in read_secrets().split("\n"):
        if line.startswith("Name"):
            print line.split()[1]

def dump_secrets():
    print read_secrets()

def generate_password(len=12):
    lower  = "abcdefghijklmnopqrstuvwxyz"
    upper  = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    number = "0123456789"
    chars  = "`~!@#$%^&*()_+-=?/>.<,|\\}]{[\"':;"

    import random
    passwd = random.choice(lower) + random.choice(upper) + random.choice(number) + random.choice(chars)

    valid = lower * 3 + upper * 3 + number * 5 + chars * 2
    for i in range(4, len):
        passwd += random.choice(valid)

    l = list(passwd)
    random.shuffle(l)
    return "".join(l)

def new_account(name, url):
    pwd = generate_password()
    append_secrets("\nName %s\n" % name + "URL %s\n" % url + "Password \"%s\"\n" % pwd)
    print pwd

def main():
    import sys

    if len(sys.argv) > 1 and sys.argv[1] == "-n":
        assert len(sys.argv) == 4, "USAGE: secret -n <name> <url>"
        new_account(sys.argv[2], sys.argv[3])
    elif len(sys.argv) > 1 and sys.argv[1] == "-l":
        list_accounts()
    elif len(sys.argv) > 1 and sys.argv[1] == "-d":
        dump_secrets()
    else:
        assert len(sys.argv) == 2
        passwd = get_password(sys.argv[1])
        xclip = subprocess.Popen(["xclip", "-selection", "clipboard"], stdin=subprocess.PIPE)
        xclip.communicate(passwd)

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "-h":
        print "Manage passwords"
        print
        print "USAGE: secret <name>		Print password for account <name>"
        print "     | secret -n <name> <url>	Create a new account <name> at <url> and print the new password"
        print "     | secret -l     	List all accounts"
        print "     | secret -d     	Dump all account data"
    else:
        main()

